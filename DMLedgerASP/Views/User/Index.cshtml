<h2>Ledger</h2>

<ul class="nav nav-tabs">
    <li role="presentation"><a data-toggle="tab" href="#bankAccountTab">Bank Accounts</a></</li>
    <li role="presentation"><a data-toggle="tab" href="#creditCardTab">Credit Cards</a></li>
    <li role="presentation"><a data-toggle="tab" href="#billTab">Bills</a></li>
</ul>

<div id="activeTable" class="tab-content">
    <div id="bankAccountTab" class="tab-pane fade in active">@Html.Partial("_BankAccountTab")</div>
    <div id="creditCardTab" class="tab-pane fade">@Html.Partial("_CreditCardTab")</div>
    <div id="billTab" class="tab-pane fade">@Html.Partial("_BillTab")</div>
</div>

@section scripts
{
    @Scripts.Render("~/bundles/services")
    <script>
        $(document).ready(function () {
            // Generate datatables for bank accounts
            var account_table = $("#accounts").DataTable({
                ajax: {
                    url: "/api/bankaccounts",
                    dataSrc: ""
                },
                columns: [
                    {
                        data: "name"
                    },
                    {
                        data: "balance",
                        className: "dt-body-right",
                        render: function (data) {
                            return "<td>$" + parseFloat(data).toFixed(2) + "</td>"
                        }
                    },
                    {
                        data: "id",
                        render: function (data) {
                            return "<button class='btn-link js-delete' data-account-id=" + data + ">Delete</button>";
                        }
                    }
                ],
                // Displays sum of the balance column
                footerCallback: function (row, data, start, end, display) {
                    var api = this.api(), data;

                    var intVal = function (i) {
                        return typeof i === 'string' ?
                            i.replace(/[\$,]/g, '') * 1 :
                            typeof i === 'number' ?
                            i : 0;
                    };
                    total = api
                        .column(1)
                        .data()
                        .reduce(function (a, b) {
                            return intVal(a) + intVal(b);
                        }, 0);

                    $(api.column(1).footer()).html("Total: $" + parseFloat(total).toFixed(2));
                }
            });
            // target only the name and balance cells for editing api. Needs to be called after the table is created
            account_table.MakeCellsEditable({
                columns: [0, 1],
                inputTypes: [
                    {
                        column: 0,
                        type: "text"
                    },
                    {
                        column: 1,
                        type: "text"
                    }
                ],
                confirmationButton: {
                    confirmCss: "btn btn-primary btn-sm",
                    cancelCss: "btn btn-default btn-sm"
                }
            });
            //console.log(account_table);

            // Generate the bills table
            var bill_table = $("#bills").DataTable({
                ajax: {
                    url: "/api/bills",
                    dataSrc: ""
                },
                columns: [
                    {
                        data: "name"
                    },
                    {
                        data: "balance",
                        className: "dt-body-right",
                        render: function (data) {
                            return "<td>$" + parseFloat(data).toFixed(2) + "</td>"
                        }
                    },
                    {
                        data: "dueDate"
                    },
                    {
                        data: "id",
                        render: function (data) {
                            return "<button class='btn-link js-delete' data-bill-id=" + data + ">Delete</button>";
                        }
                    }
                ],
                // Displays sum of the balance column
                footerCallback: function (row, data, start, end, display) {
                    var api = this.api(), data;

                    var intVal = function (i) {
                        return typeof i === 'string' ?
                            i.replace(/[\$,]/g, '') * 1 :
                            typeof i === 'number' ?
                            i : 0;
                    };
                    total = api
                        .column(1)
                        .data()
                        .reduce(function (a, b) {
                            return intVal(a) + intVal(b);
                        }, 0);

                    $(api.column(1).footer()).html("Total: $" + parseFloat(total).toFixed(2));
                }
            });
            // Target only the name, balance, and date to be editable
            bill_table.MakeCellsEditable({
                columns: [0, 1, 2],
                inputTypes: [
                    {
                        column: 0,
                        type: "text"
                    },
                    {
                        column: 1,
                        type: "text"
                    },
                    {
                        column: 2,
                        type: "text"
                    }
                ],
                confirmationButton: {
                    confirmCss: "btn btn-primary btn-sm",
                    cancelCss: "btn btn-default btn-sm"
                }
            });
            //console.log(bill_table);

            // Generate Credit Cards table
            var creditCard_table = $("#creditcards").DataTable({
                ajax: {
                    url: "/api/creditcards",
                    dataSrc: ""
                },
                columns: [
                    {
                        data: "name"
                    },
                    {
                        data: "limit",
                        className: "dt-body-right",
                        render: function (data) {
                            return "<td>$" + parseFloat(data).toFixed(2) + "</td>"
                        }
                    },
                    {
                        data: "balance",
                        className: "dt-body-right",
                        render: function (data) {
                            return "<td>$" + parseFloat(data).toFixed(2) + "</td>"
                        }
                    },
                    {
                        data: "payment",
                        className: "dt-body-right",
                        render: function (data) {
                            return "<td>$" + parseFloat(data).toFixed(2) + "</td>"
                        }
                    },
                    {
                        data: "dueDate"
                    },
                    {
                        data: "id",
                        render: function (data) {
                            return "<button class='btn-link js-delete' data-creditcard-id=" + data + ">Delete</button>";
                        }
                    }
                ]
            });

            creditCard_table.MakeCellsEditable({
                columns: [0, 1, 2, 3, 4],
                inputTypes: [
                    {
                        column: 0,
                        type: "text"
                    },
                    {
                        column: 1,
                        type: "text"
                    },
                    {
                        column: 2,
                        type: "text"
                    },
                    {
                        column: 3,
                        type: "text"
                    },
                    {
                        column: 4,
                        type: "text"
                    }
                ],
                confirmationButton: {
                    confirmCss: "btn btn-primary btn-sm",
                    cancelCss: "btn btn-default btn-sm"
                }
            });
            console.log(creditCard_table);

            // Post new bank account using jquery and ajax
            var bankForm = $("#newBank").submit(function (e) {

                e.preventDefault();

                if (account_table ? account_table : table) {
                    var bankModel = {
                        Name: $("#newBank").find($("#bankName")).val(),
                        Balance: $("#newBank").find($("#bankBalance")).val()
                    };

                    addHelper("/api/BankAccounts/CreateBankAccount", bankModel, account_table, bankForm);
                }

            });

            // Post new bill using jquery and ajax
            var billForm = $("#newBill").submit(function (e) {

                e.preventDefault();

                if (bill_table ? bill_table : table) {
                    var billModel = {
                        Name: $("#newBill").find($("#billName")).val(),
                        Balance: $("#newBill").find($("#billPayment")).val(),
                        DueDate: $("#newBill").find($("#billDue")).val()
                    };

                    addHelper("/api/Bills/CreateBill", billModel, bill_table, billForm);
                }

            });

            // Post new credit card using jquery and ajax
            var creditCardForm = $("#newCreditCard").submit(function (e) {

                e.preventDefault();

                if (creditCard_table ? creditCard_table : table) {
                    var creditCardModel = {
                        Name: $("#newCreditCard").find($("#creditCardName")).val(),
                        Limit: $("#newCreditCard").find($("#creditCardLimit")).val(),
                        Balance: $("#newCreditCard").find($("#creditCardBalance")).val(),
                        Payment: $("#newCreditCard").find($("#creditCardPayment")).val(),
                        DueDate: $("#newCreditCard").find($("#creditCardDue")).val()
                    };

                    addHelper("/api/CreditCards/CreateCreditCard", creditCardModel, creditCard_table, creditCardForm);
                }

            });

            // Delete button for bills table items
            $("#bills").on("click", ".js-delete", function () {
                var button = $(this);

                bootbox.confirm("Are you sure that you want to delete this entry?", function (result) {
                    if (result) {
                        $.ajax({
                            url: "/api/bills/" + button.attr("data-bill-id"),
                            method: "DELETE",
                            success: function () {
                                bill_table.row(button.parents("tr")).remove().draw();
                            }
                        });
                    }
                });
            });

            // Delete button for bank account table items
            $("#accounts").on("click", ".js-delete", function () {
                var button = $(this);

                bootbox.confirm("Are you sure that you want to delete this entry?", function (result) {
                    if (result) {
                        $.ajax({
                            url: "/api/bankaccounts/" + button.attr("data-account-id"),
                            method: "DELETE",
                            success: function () {
                                account_table.row(button.parents("tr")).remove().draw();
                            }
                        });
                    }
                });
            });

            // Delete button for credit cards table items
            $("#creditcards").on("click", ".js-delete", function () {
                var button = $(this);

                bootbox.confirm("Are you sure that you want to delete this entry?", function (result) {
                    if (result) {
                        $.ajax({
                            url: "/api/creditcards/" + button.attr("data-creditcard-id"),
                            method: "DELETE",
                            success: function () {
                                creditCard_table.row(button.parents("tr")).remove().draw();
                            }
                        });
                    }
                });
            });
        });
    </script>
}


